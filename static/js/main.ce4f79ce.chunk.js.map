{"version":3,"sources":["component/Charts/LineChart.js","component/Charts/StackedChart.js","container/decisionReq/DecisionReq.js","container/keySuccess/KeySuccess.js","container/Wireframe2.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","this","highChartsRender","Highcharts","chart","credits","enabled","title","text","props","data","align","type","renderTo","id","yAxis","gridLineWidth","minorGridLineWidth","lineWidth","labels","formatter","style","color","xAxis","categories","legend","layout","verticalAlign","plotOptions","series","label","connectorAllowed","responsive","rules","condition","maxWidth","chartOptions","classes","React","Component","StackedChart","plotLines","width","value","y","x","tooltip","pointFormat","shared","column","stacking","dataLabels","name","DecisionReq","Fragment","className","KeySuccess","Wireframe2","Container","Grid","container","item","xs","sm","Box","SalesData","cornerRadius","marginInPercent","arcPadding","hideText","colors","RevenueData","RevenueSalesData","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"goDAmGeA,E,4LAzFPC,KAAKC,qB,yFAOLC,IAAWC,MAAM,CACbC,QAAS,CAAEC,SAAS,GACpBC,MAAO,CACHC,KAAMP,KAAKQ,MAAMC,KAAKH,MACtBI,MAAO,QAEXP,MAAO,CACHQ,KAAM,OACNC,SAAU,kBAAoBZ,KAAKQ,MAAMK,IAG7CC,MAAO,CACHR,MAAO,CACHC,KAAM,MAEVQ,cAAe,EACfC,mBAAoB,EACpBC,UAAW,EACXC,OAAQ,CACJC,UAAW,WACP,MAAO,IAEXC,MAAO,CACHC,MAAO,aAOnBC,MAAO,CACHC,WAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAGxEC,OAAQ,CACJC,OAAQ,WACRf,MAAO,QACPgB,cAAe,UAGnBC,YAAa,CACTC,OAAQ,CACJC,MAAO,CACHC,kBAAkB,KAK9BF,OAAQ5B,KAAKQ,MAAMC,KAAKA,KAExBsB,WAAY,CACRC,MAAO,CAAC,CACJC,UAAW,CACPC,SAAU,KAEdC,aAAc,CACVX,OAAQ,CACJC,OAAQ,aACRf,MAAO,SACPgB,cAAe,kB,+BAW/B1B,KAAKQ,MADL4B,QAEJ,OACI,kBAAC,WAAD,KAC8B,qBAAlBpC,KAAKQ,MAAMK,IAAsB,yBAAKA,GAAI,kBAAoBb,KAAKQ,MAAMK,U,GArFzEwB,IAAMC,W,wBC2GfC,E,4LArGPvC,KAAKC,qB,yFAWLC,IAAWC,MAAM,CACbC,QAAS,CAAEC,SAAS,GAEpBC,MAAO,CACHC,KAAMP,KAAKQ,MAAMC,KAAKH,MACtBI,MAAO,QAEXP,MAAO,CACHQ,KAAM,SACNC,SAAU,aAEdE,MAAO,CACHR,MAAO,CACHC,KAAM,MAEVQ,cAAe,EACfC,mBAAoB,EACpBC,UAAW,EACXC,OAAQ,CACJC,UAAW,WACP,MAAO,IAEXC,MAAO,CACHC,MAAO,YAGfmB,UAAW,CAAC,CACRnB,MAAO,UACPoB,MAAO,EACPC,MAAO,EACPb,MAAO,CAAEtB,KAAM,MAAOG,MAAO,QAC7BiC,GAAI,GACJC,EAAE,OAMVtB,MAAO,CACHC,WAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAExEC,OAAQ,CACJC,OAAQ,WACRf,MAAO,QACPgB,cAAe,UAEnBmB,QAAS,CACLC,YAAa,2GACbC,QAAQ,GAEZpB,YAAa,CACTqB,OAAQ,CACJC,SAAU,SACVC,WAAY,CACR7C,SAAS,KAIrBuB,OAAQ,CAAC,CACLuB,KAAM,SACN9B,MAAO,QACPZ,KAAM,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3C,CACE0C,KAAM,SACN9B,MAAO,SACPZ,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACzC,CACC0C,KAAM,SACN9B,MAAO,SACPZ,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,S,+BAS5CT,KAAKQ,MADL4B,QAEJ,OACI,kBAAC,WAAD,KACK,yBAAKvB,GAAI,mB,GAlGCwB,IAAMC,W,YCelBc,MAff,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,kBACX,8DACA,4BACI,0CACA,0CACA,8C,MCELC,MAXf,WACI,OACI,kBAAC,IAAMF,SAAP,KACI,yBAAKC,UAAU,qBACX,yD,iBC8EDE,MAvEf,WACI,OACI,kBAAC,IAAMH,SAAP,KACE,4BAAQC,UAAU,gBAChB,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,4CAKR,kBAACJ,EAAA,EAAD,KAYA,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACf,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACE,GAAI,GAAIR,UAAU,6BACvB,+DAEN,kBAACI,EAAA,EAAD,CAAME,MAAI,EAACE,GAAI,GAAIR,UAAU,oBAC3B,kBAACI,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGP,UAAU,uCAC1B,kBAACS,EAAA,EAAD,CAAKT,UAAU,aACb,kBAAC,EAAD,CAAWzC,GAAI,EAAGJ,KAAMuD,MAG5B,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGP,UAAU,iBACxB,kBAAC,EAAD,MACA,kBAACS,EAAA,EAAD,CAAKT,UAAU,aACb,kBAAC,IAAD,CAAYzC,GAAG,cAAcoD,aAAc,EAAGC,gBAAiB,IAAMC,WAAY,EAAGC,UAAU,EAAMC,OAAQ,CAAC,UAAW,UAAW,iBAK7I,kBAACX,EAAA,EAAD,CAAME,MAAI,EAACE,GAAI,GAAIR,UAAU,kBAC3B,kBAACI,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGP,UAAU,iBAC1B,kBAACS,EAAA,EAAD,CAAKT,UAAU,aACf,kBAAC,EAAD,CAAWzC,GAAI,EAAGJ,KAAM6D,MAG1B,kBAACZ,EAAA,EAAD,CAAME,MAAI,EAACE,GAAI,EAAGR,UAAU,iBAC1B,kBAAC,EAAD,SAIN,kBAACI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIP,UAAU,kBAC3B,kBAACI,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGP,UAAU,iBAC1B,kBAACS,EAAA,EAAD,CAAKT,UAAU,aACb,kBAAC,EAAD,CAAczC,GAAI,EAAGJ,KAAM8D,MAG/B,kBAACb,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGP,UAAU,wBC9D3BkB,MATf,WAEE,OACE,kBAAC,IAAMnB,SAAP,KACE,kBAAC,EAAD,QCEcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ce4f79ce.chunk.js","sourcesContent":["\r\nimport React, { Fragment } from 'react'\r\nimport Highcharts from 'highcharts';\r\n\r\n\r\nclass LineChart extends React.Component {\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.highChartsRender()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n    highChartsRender() {\r\n\r\n        Highcharts.chart({\r\n            credits: { enabled: false },\r\n            title: {\r\n                text: this.props.data.title,\r\n                align: 'left'\r\n            },\r\n            chart: {\r\n                type: 'line',\r\n                renderTo: 'chart-container' + this.props.id\r\n            },\r\n\r\n            yAxis: {\r\n                title: {\r\n                    text: null\r\n                },\r\n                gridLineWidth: 0,\r\n                minorGridLineWidth: 0,\r\n                lineWidth: 1,\r\n                labels: {\r\n                    formatter: function () {\r\n                        return '';\r\n                    },\r\n                    style: {\r\n                        color: '#4572A7'\r\n                    }\r\n                }\r\n\r\n\r\n            },\r\n\r\n            xAxis: {\r\n                categories: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n            },\r\n\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n\r\n            plotOptions: {\r\n                series: {\r\n                    label: {\r\n                        connectorAllowed: false\r\n                    }\r\n                }\r\n            },\r\n\r\n            series: this.props.data.data,\r\n\r\n            responsive: {\r\n                rules: [{\r\n                    condition: {\r\n                        maxWidth: 500\r\n                    },\r\n                    chartOptions: {\r\n                        legend: {\r\n                            layout: 'horizontal',\r\n                            align: 'center',\r\n                            verticalAlign: 'bottom'\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes\r\n        } = this.props;\r\n        return (\r\n            <Fragment>\r\n                {typeof this.props.id !== \"undefined\" && <div id={\"chart-container\" + this.props.id}>\r\n                </div>}\r\n            </Fragment>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\nexport default LineChart;","\r\nimport React, { Fragment } from 'react'\r\nimport Highcharts from 'highcharts';\r\n\r\n\r\nclass StackedChart extends React.Component {\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.highChartsRender()\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n\r\n\r\n    highChartsRender() {\r\n\r\n        Highcharts.chart({\r\n            credits: { enabled: false },\r\n\r\n            title: {\r\n                text: this.props.data.title,\r\n                align: 'left'\r\n            },\r\n            chart: {\r\n                type: 'column',\r\n                renderTo: 'container'\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: null\r\n                },\r\n                gridLineWidth: 0,\r\n                minorGridLineWidth: 0,\r\n                lineWidth: 1,\r\n                labels: {\r\n                    formatter: function () {\r\n                        return '';\r\n                    },\r\n                    style: {\r\n                        color: '#4572A7'\r\n                    }\r\n                },\r\n                plotLines: [{\r\n                    color: '#FF0000',\r\n                    width: 2,\r\n                    value: 9,\r\n                    label: { text: \"TGT\", align: 'right',\r\n                    y: -10, /*moves label down*/\r\n                    x:20 }\r\n                }]\r\n\r\n\r\n            },\r\n\r\n            xAxis: {\r\n                categories: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n            },\r\n            legend: {\r\n                layout: 'vertical',\r\n                align: 'right',\r\n                verticalAlign: 'middle'\r\n            },\r\n            tooltip: {\r\n                pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',\r\n                shared: true\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal',\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    }\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Actual',\r\n                color: \"green\",\r\n                data: [4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n            },{\r\n                name: 'Margin',\r\n                color: \"purple\",\r\n                data: [0, 0, 5, 3, 2, 2, 2, 2, 3, 2, 2, 2]\r\n            }, {\r\n                name: 'Budget',\r\n                color: \"orange\",\r\n                data: [0, 0, 5, 3, 2, 5, 1, 3, 1, 3, 1, 5 ]\r\n            }]\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes\r\n        } = this.props;\r\n        return (\r\n            <Fragment>\r\n                {<div id={\"container\"}>\r\n                </div>}\r\n            </Fragment >\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\nexport default StackedChart;","import React from 'react'\r\nimport './decisionReq.css'\r\n\r\n\r\n\r\nfunction DecisionReq(){\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"deci-req-field\">\r\n                <h2>Decisions Requested From Board</h2>\r\n                <ul>\r\n                    <li> Decision </li>\r\n                    <li> Decision </li>\r\n                    <li> Decision </li>\r\n                </ul>\r\n            </div>        \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DecisionReq","import React from 'react'\r\nimport './keySuccess.css'\r\n\r\n\r\nfunction KeySuccess(){\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"key-success-field\">\r\n                <h2>Key Success This Month</h2>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default KeySuccess","import React from 'react'\r\nimport {Container, Grid, Box} from '@material-ui/core'\r\n\r\n\r\nimport LineChart from '../component/Charts/LineChart'\r\nimport SalesData from '../data/sales.json'\r\nimport RevenueData from '../data/revenue.json'\r\nimport RevenueSalesData from '../data/revenue_sales.json'\r\nimport StackedChart from '../component/Charts/StackedChart'\r\nimport './common.css'\r\nimport DecisionReq from '../container/decisionReq/DecisionReq'\r\nimport KeySuccess from './keySuccess/KeySuccess'\r\nimport GaugeChart from 'react-gauge-chart'\r\n\r\n\r\nfunction  Wireframe2(){  \r\n    return(\r\n        <React.Fragment>\r\n          <header className=\"header-style\">  \r\n            <Container>            \r\n              <Grid container>\r\n                <Grid item xs={12}>              \r\n                  <h2>Overview</h2> \r\n                </Grid>\r\n              </Grid> \r\n            </Container>      \r\n          </header>\r\n          <Container>\r\n\r\n          {/**        \r\n          <Grid container spacing={2}>         \r\n            <Grid item xs={6}>\r\n              <ProgressDataTable></ProgressDataTable>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <YearToDate></YearToDate> \r\n          </Grid>\r\n          </Grid>  \r\n          */}\r\n          <Grid container> \r\n          <Grid item sm={12} className=\"padding-ad-10 sec-heading\">\r\n                <h3>Sales, Revenue, SOW + Pipeline</h3>\r\n          </Grid>  \r\n          <Grid item sm={12} className=\"stackedContainer\">\r\n            <Grid container>\r\n              <Grid item xs={7} className=\"revenue-stacked-chart padding-ad-10\">\r\n                <Box className=\"box-style\">\r\n                  <LineChart id={1} data={SalesData}></LineChart>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={5} className=\"padding-ad-10\">                \r\n                  <DecisionReq></DecisionReq> \r\n                  <Box className=\"box-style\">\r\n                    <GaugeChart id=\"gauge-chart\" cornerRadius={0} marginInPercent={0.05} arcPadding={0} hideText={true} colors={[\"#ff4800\", \"#FFA500\", \"#008000\"]}/>\r\n                </Box>              \r\n              </Grid>                        \r\n            </Grid>          \r\n          </Grid>             \r\n          <Grid item sm={12} className=\"speedometerrow\"> \r\n            <Grid container>          \r\n              <Grid item xs={7} className=\"padding-ad-10\">\r\n                <Box className=\"box-style\">\r\n                <LineChart id={2} data={RevenueData}></LineChart>  \r\n                </Box>\r\n              </Grid> \r\n              <Grid item sm={5} className=\"padding-ad-10\">                \r\n                <KeySuccess></KeySuccess>\r\n              </Grid>          \r\n            </Grid>           \r\n          </Grid>            \r\n          <Grid item xs={12} className=\"pipeline-chart\"> \r\n            <Grid container>     \r\n              <Grid item xs={7} className=\"padding-ad-10\">    \r\n                <Box className=\"box-style\">\r\n                  <StackedChart id={2} data={RevenueSalesData}></StackedChart> \r\n                </Box> \r\n              </Grid>\r\n              <Grid item xs={5} className=\"padding-ad-10\"> \r\n              </Grid>\r\n            </Grid>   \r\n            </Grid> \r\n          </Grid>\r\n          </Container>\r\n        </React.Fragment>\r\n    ) \r\n}\r\nexport default Wireframe2\r\n\r\n//<h3>Plus Cirrent Sheet of Budget Headlines</h3>\r\n/*let criteria = [20,50,100]\r\n\tlet startValue = 0\r\n  let endValue = 100\r\n  let rows =[ {score:10, label:\"Sales, Rev, Sow, Pipeline\", desc:\"Decisions Resolved From Sow\"},\r\n              {score:60, label:\"Key Accounts\", desc:\"Decisions Req\"},\r\n              {score:20, label:\"Engineering\", desc:\"Decisions Req\"},\r\n              {score:80, label:\"Future Markets + Sales\", desc:\"Decisions Req\"},\r\n              {score:75, label:\"Finances\", desc:\"Decisions Req\"}]*/\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Wireframe2 from './container/Wireframe2'\r\n\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <React.Fragment>       \r\n      <Wireframe2></Wireframe2>      \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}